
// as a convenience we can display some summary information about structured storage files
instance Print (file z w) where
  print = printFile

// some types can be stored directly as-is
class StorePrim a
instance StorePrim ()
instance StorePrim bool
instance StorePrim byte
instance StorePrim char
instance StorePrim short
instance StorePrim int
instance StorePrim long
instance StorePrim int128
instance StorePrim float
instance StorePrim double
instance StorePrim time
instance StorePrim datetime
instance StorePrim timespan
instance (p=(h*t), StorePrim h, StorePrim t) => StorePrim p
instance (r={h*t}, StorePrim h, StorePrim t) => StorePrim r
instance (v=|h+0|, StorePrim h) => StorePrim v
instance (v=|h+t|, StorePrim h, StorePrim t) => StorePrim v
instance (StorePrim a) => StorePrim [:a|n:]
instance StorePrim a@?
instance StorePrim a@f
instance (Data d t, StorePrim t) => StorePrim d

// for other types, what _should_ they look like?
class StorageType a b | a -> b
instance (StorePrim a) => StorageType a a
instance (StorageType a b) => StorageType [:a|n:] [:b|n:]
instance (StorageType a b) => StorageType [a] [b]@?

// tuples
class IsTuple t
instance IsTuple ()
instance (p=(_*_)) => IsTuple p
class (IsTuple i) => TupleStorageType i o | i -> o
instance TupleStorageType () ()
instance (p=(h*t), StorageType h qh, TupleStorageType t qt, (qh*qt)=q) => TupleStorageType p q
instance (TupleStorageType p q) => StorageType p q

// records
class IsRecord t
instance IsRecord ()
instance (r={_*_}) => IsRecord r
class (IsRecord i) => RecordStorageType i o | i -> o
instance RecordStorageType () ()
instance (p={lbl:h*t}, StorageType h qh, RecordStorageType t qt, {lbl:qh*qt}=q) => RecordStorageType p q
instance (RecordStorageType p q) => StorageType p q

// variants
class IsVariant t
instance IsVariant 0
instance (t=|_+_|) => IsVariant t
class (IsVariant i) => VariantStorageType i o | i -> o
instance VariantStorageType 0 0
instance (p=|lbl:h+t|, StorageType h qh, VariantStorageType t qt, |lbl:qh+qt|=q) => VariantStorageType p q
instance (VariantStorageType p q) => StorageType p q

// if there's a storage type, you can make it
class (StorageType a b) => StoreAs w a b where
  storeAs :: ((file 1 w), a) -> b
instance (StorePrim a) => StoreAs w a a where
  storeAs _ x = x

// some types can be stored in-place
class (StorageType a b) => StoreInto w a b where
  storeInto :: ((file 1 w), a, b) -> ()

instance StoreInto w () () where
  storeInto _ _ _ = ()
instance (p=(ph*pt), q=(qh*qt), StoreInto w ph qh, StoreInto w pt qt) => StoreInto w p q where
  storeInto f p q = do { storeInto(f, p.0, q.0); storeInto(f, tupleTail(p), tupleTail(q)); }
instance (p=(ph*pt), q=(qh*qt), StoreAs w ph qh, StoreInto w pt qt) => StoreInto w p q where
  storeInto f p q = do { q.0 <- storeAs(f, p.0); storeInto(f, tupleTail(p), tupleTail(q)); }
instance (p={ph*pt}, q={qh*qt}, StoreInto w ph qh, StoreInto w pt qt) => StoreInto w p q where
  storeInto f p q = do { storeInto(f, recordHeadValue(p), recordHeadValue(q)); storeInto(f, recordTail(p), recordTail(q)); }
instance (p={ph*pt}, q={qh*qt}, StoreAs w ph qh, StoreInto w pt qt) => StoreInto w p q where
  storeInto f p q = do { recordHeadValue(q) <- storeAs(f, recordHeadValue(p)); storeInto(f, recordTail(p), recordTail(q)); }

// store into fixed-length arrays
storeIntoSA :: (StoreInto w p q) => ((file 1 w), [:p|n:], long, [:q|n:]) -> ()
storeIntoSA f p i q =
  if (i === salength(p)) then
    ()
  else do {
    storeInto(f, saelem(p, i), saelem(q, i));
    storeIntoSA(f, p, i+1L, q);
  }
instance (StoreInto w p q) => StoreInto w [:p|n:] [:q|n:] where
  storeInto f p q = storeIntoSA(f, p, 0L, q)

storeIntoAsSA :: (StoreAs w p q) => ((file 1 w), [:p|n:], long, [:q|n:]) -> ()
storeIntoAsSA f p i q =
  if (i === salength(p)) then
    ()
  else do {
    saelem(q,i) <- storeAs(f, saelem(p,i));
    storeIntoAsSA(f, p, i+1L, q);
  }
instance (StoreAs w p q) => StoreInto w [:p|n:] [:q|n:] where
  storeInto f p q = storeIntoAsSA(f, p, 0L, q)

// we can store-as if we can store-into
instance (StoreInto w p q) => StoreAs w p q where
  storeAs f p = do { q = (newPrim()::q); storeInto(f, p, q); return q }

// store into variable-length arrays
storeIntoA :: (StoreInto w p q) => ((file 1 w), [p], long, [q]) -> ()
storeIntoA f p i q =
  if (i === length(p)) then
    ()
  else do {
    storeInto(f, p[i], q[i]);
    storeIntoA(f, p, i+1L, q);
  }
storeIntoAsA :: (StoreAs w p q) => ((file 1 w), [p], long, [q]) -> ()
storeIntoAsA f p i q =
  if (i === length(p)) then
    ()
  else do {
    q[i] <- storeAs(f, p[i]);
    storeIntoAsA(f, p, i+1L, q);
  }

instance (StoreInto w p q) => StoreAs w [p] [q]@? where
  storeAs f p = do { qh = pallocateArray(f, length(p)); q = pload(f, qh); storeIntoA(f, p, 0L, q); unsafeSetLength(q, length(p)); unload(f, q); return qh }
instance (StoreAs w p q) => StoreAs w [p] [q]@? where
  storeAs f p = do { qh = pallocateArray(f, length(p)); q = pload(f, qh); storeIntoAsA(f, p, 0L, q); unsafeSetLength(q, length(p)); unload(f, q); return qh }

// store variants
class (StorageType p q) => StoreVariantAs w p q where
  storeVariantAs :: ((file 1 w), p) -> q

instance (p=|lbl:h+0|, StoreAs w h th, q=|lbl:th+0|) => StoreVariantAs w p q where
  storeVariantAs f v = variantSplit(v, \h.variantInjectHead(storeAs(f, h)), toClosure(\_.newPrim()))
instance (p=|lbl:h+t|, q=|lbl:th+tt|, StoreAs w h th, StoreAs w t tt) => StoreVariantAs w p q where
  storeVariantAs f v = variantSplit(v, \h.variantInjectHead(storeAs(f, h)), \t.variantLiftTail(storeVariantAs(f,t)))

instance (StoreVariantAs w a b) => StoreAs w a b where
  storeAs f v = storeVariantAs(f,v)


// recurse over stored sequences to avoid stack overflow
flFMapRev        r f xs = case unroll(load(xs)) of |0:_=r, 1:p=flFMapRev(cons(fmap(f, load(p.0)), r), f, p.1)|
flFFiltMapRev  r p f xs = case unroll(load(xs)) of |0:_=r, 1:c=flFFiltMapRev(cons(ffilterMap(p, f, load(c.0))::[_], r), p, f, c.1)|
flFFiltMMapRev   r f xs = case unroll(load(xs)) of |0:_=r, 1:p=flFFiltMMapRev(cons(ffilterMMap(f, load(p.0))::[_], r), f, p.1)|

// array comprehension support for nominal stored sequences
data carray a n = {avail:long, buffer:[:a|n:]}
data fseq a n = (^x.(()+((carray a n)*x@z)))@z
data mseq a = ^x.(()+([a]*x))

toMSeq :: (^x.(()+([a]*x))) -> (mseq a)
toMSeq = unsafeCast

instance SeqDesc (carray a n) "carray" a
instance SeqDesc (fseq a n) "fseq" a
instance SeqDesc (mseq a) "mseq" a

instance Map f c a r "fseq" (fseq a n) "mseq" (mseq r) where
  fmap f xs = toMSeq(lreverse(flFMapRev(nil(), f, xs.t)))
instance FilterMap p pc f c a r "fseq" (fseq a n) "mseq" (mseq r) where
  ffilterMap p f xs = toMSeq(lreverse(flFFiltMapRev(nil(), p, f, xs.t)))
instance FilterMMap f c a r "fseq" (fseq a n) "mseq" (mseq r) where
  ffilterMMap f xs = toMSeq(lreverse(flFFiltMMapRev(nil(), f, xs.t)))

instance Array (mseq a) a where
  size     xs     = lfoldl(\s vs.s + length(vs), 0L, xs.t)
  element  xs i   = match lfindS(i, \j vs.j-length(vs), \j vs.j < length(vs), xs.t) with | |1=(j, vs)| -> vs[length(vs) - (j+1)] | _ -> newPrim()
  elementM xs i = match lfindS(i, \j vs.j-length(vs), \j vs.j < length(vs), xs.t) with | |1=(j, vs)| -> elementM(vs, length(vs) - (j+1)) | _ -> nothing
  elements xs i e = concat(toArray(lfindSliceSpan(xs.t, 0L, i, e)))
  elementsM = elements

// array comprehension support for stored sequences
instance SeqDesc (^x.(()+([a]@f*x@f)))@f ("fseq"*f) a

instance Map f c a r ("fseq"*g) ((^x.(()+([a]@g*x@g)))@g) "mrope" (^x.(()+([r]*x))) where
  fmap f xs = lreverse(flFMapRev(nil(), f, xs))
instance FilterMap p pc f c a r ("fseq"*g) (^x.(()+([a]@g*x@g)))@g "mrope" (^x.(()+([r]*x))) where
  ffilterMap p f xs = lreverse(flFFiltMapRev(nil(), p, f, xs))
instance FilterMMap f c a r ("fseq"*g) (^x.(()+([a]@g*x@g)))@g "mrope" (^x.(()+([r]*x))) where
  ffilterMMap f xs = lreverse(flFFiltMMapRev(nil(), f, xs))

// array comprehension support for sequences stored with compile-time buffer lengths
instance Array (carray a n) a where
  size     c     = c.t.avail
  element  c i   = element(c.t.buffer, i)
  elementM c i  = getElementByIndex(c, \x i.element(x, i), i, size(c))
  elements c i e = elements(c.t.buffer, i, e)
  elementsM c i e = elementsM(c.t.buffer, i, e)

instance Map f c a r "carray" (carray a n) "array" [r] where
  fmap f xs = fmapArrStep(f, xs, 0L, newArray(size(xs)))
instance FilterMap p pc f c a r "carray" (carray a n) "array" [r] where
  ffilterMap p f xs = fmap(f, selectB(xs, ffilterArrStep(p, xs, 0L, newBitvec(size(xs)))))
instance FilterMMap f c a r "carray" (carray a n) "array" [r] where
  ffilterMMap f xs = let mys = newArray(size(xs)); n = ffilterMMapStep(f, xs, 0L, mys, 0L) in selectJust(mys, 0L, newArray(n), 0L)

instance SeqDesc (^x.(()+((carray a n)@f*x@f)))@f ("cfseq"*f) a

instance Map f c a r ("cfseq"*g) ((^x.(()+((carray a n)@g*x@g)))@g) "mrope" (^x.(()+([r]*x))) where
  fmap f xs = lreverse(flFMapRev(nil(), f, xs))
instance FilterMap p pc f c a r ("cfseq"*g) (^x.(()+((carray a n)@g*x@g)))@g "mrope" (^x.(()+([r]*x))) where
  ffilterMap p f xs = lreverse(flFFiltMapRev(nil(), p, f, xs))
instance FilterMMap f c a r ("cfseq"*g) (^x.(()+((carray a n)@g*x@g)))@g "mrope" (^x.(()+([r]*x))) where
  ffilterMMap f xs = lreverse(flFFiltMMapRev(nil(), f, xs))

// array comprehension support for legacy stored arrays
data darray a = [a]

darr :: ((darray a)) -> [a]
darr = unsafeCast

instance Convert (darray a) [a] where
  convert = darr

instance Array (darray a) a where
  size     d     = size(darr(d))
  element  d i   = element(darr(d), i)
  elementM d i  = getElementByIndex(d, \x i.element(x, i), i, size(d))
  elements d i e = elements(darr(d), i, e)
  elementsM d i e = elementsM(darr(d), i, e)

instance SeqDesc (darray a) "darray" a

instance Map f c a r "darray" (darray a) "array" [r] where
  fmap f xs = fmapArrStep(f, xs, 0L, newArray(size(xs)))
instance FilterMap p pc f c a r "darray" (darray a) "array" [r] where
  ffilterMap p f xs = fmap(f, selectB(xs, ffilterArrStep(p, xs, 0L, newBitvec(size(xs)))))
instance FilterMMap f c a r "darray" (darray a) "array" [r] where
  ffilterMMap f xs = let mys = newArray(size(xs)); n = ffilterMMapStep(f, xs, 0L, mys, 0L) in selectJust(mys, 0L, newArray(n), 0L)

instance SeqDesc (^x.(()+((darray a)@f*x@f)))@f ("dfseq"*f) a

instance Map f c a r ("dfseq"*g) ((^x.(()+((darray a)@g*x@g)))@g) "mrope" (^x.(()+([r]*x))) where
  fmap f xs = case unroll(load(xs)) of |0:_=nil(), 1:p=cons(fmap(f, load(p.0)) :: [r], fmap(f, p.1))|
instance FilterMap p pc f c a r ("dfseq"*g) (^x.(()+((darray a)@g*x@g)))@g "mrope" (^x.(()+([r]*x))) where
  ffilterMap p f xs = case unroll(load(xs)) of |0:_=nil(), 1:c=cons(ffilterMap(p, f, load(c.0)) :: [r], ffilterMap(p, f, c.1))|
instance FilterMMap f c a r ("dfseq"*g) (^x.(()+((darray a)@g*x@g)))@g "mrope" (^x.(()+([r]*x))) where
  ffilterMMap f xs = case unroll(load(xs)) of |0:_=nil(), 1:p=cons(ffilterMMap(f, load(p.0)) :: [r], ffilterMMap(f, p.1))|


// support access to stored ropes like arrays
flfoldl :: ((a,b) -> a, a, ^x.(()+(b*x@f))) -> a
flfoldl f s xs =
  match unroll(xs) with
  | |1=(h, t)| -> flfoldl(f, f(s, h), load(t))
  | _          -> s

flfind :: (a -> bool, ^x.(()+(a*x@f))) -> (()+a)
flfind p xs =
  match unroll(xs) with
  | |1=(h, t)| where p(h) -> |1=h|
  | |1=(_, t)|            -> flfind(p, load(t))
  | _                     -> |0=()|

flfindS :: (s, (s,a) -> s, (s,a) -> bool, ^x.(()+(a*x@f))) -> (()+(s*a))
flfindS s ss p xs =
  match unroll(xs) with
  | |1=(h, t)| where p(s, h) -> |1=(s,h)|
  | |1=(h, t)|               -> flfindS(ss(s,h), ss, p, load(t))
  | _                        -> |0=()|

flfindSliceSpan :: (Array as a) => (^x.(()+(as@f*x@f)), long, long, long) -> ^x.(()+([a]*x))
flfindSliceSpan n k i e =
  match unroll(n) with
  | |1=(h,t)| where k < e ->
    let
      xs = load(h);
      nk = k+size(xs);
    in
      if (nk < i) then
        flfindSliceSpan(load(t), nk, i, e)
      else
        cons(xs[max(0L,i-k):min(size(xs),e-k)], flfindSliceSpan(load(t), nk, i, e))
  | _ -> nil()
{-# UNSAFE flfindSliceSpan #-}

instance (Array as a) => Array (^x.(()+(as@f*x@f))) a where
  size     xs     = flfoldl(\s vs.s + size(load(vs)), 0L, xs)
  element  xs i   = match flfindS(i, \j vs.j-size(load(vs)), \j vs.j < size(load(vs)), xs) with | |1=(j, vs)| -> let lvs = load(vs) in element(lvs,size(lvs) - (j+1)) | _ -> newPrim()
  elementM  xs i = match flfindS(i, \j vs.j-size(load(vs)), \j vs.j < size(load(vs)), xs) with | |1=(j, vs)| -> let lvs = load(vs) in elementM(lvs,size(lvs) - (j+1)) | _ -> nothing
  elements xs i e = concat(toArray(flfindSliceSpan(xs, 0L, i, e)))
  elementsM = elements

instance (Array as a) => Array (^x.(()+(as@f*x@f)))@f a where
  size     xs     = size(load(xs))
  element  xs i   = element(load(xs), i)
  elementM xs i =  elementM(load(xs), i)
  elements xs i e = elements(load(xs), i, e)
  elementsM xs i e = elementsM(load(xs), i, e)

instance Array (fseq a _) a where
  size     xs     = flfoldl(\s vs.s + size(load(vs)), 0L, load(xs.t))
  element  xs i   = match flfindS(i, \j vs.j-size(load(vs)), \j vs.j < size(load(vs)), load(xs.t)) with | |1=(j, vs)| -> let lvs = load(vs) in element(lvs,j) | _ -> newPrim()
  elementM xs i  = match flfindS(i, \j vs.j-size(load(vs)), \j vs.j < size(load(vs)), load(xs.t)) with | |1=(j, vs)| -> let lvs = load(vs) in elementM(lvs,j) | _ -> nothing
  elements xs i e = concat(toArray(flfindSliceSpan(load(xs.t), 0L, i, e)))
  elementsM = elements

