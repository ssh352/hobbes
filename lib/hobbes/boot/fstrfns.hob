
findSubseqStep :: (Equiv a b) => ([a], [b], long, long) -> long
findSubseqStep s ss i j =
  if (i == length(s) or j == length(ss)) then
    (i-j)
  else if (s[i] == ss[j]) then
    findSubseqStep(s, ss, i+1, j+1)
  else
    findSubseqStep(s, ss, (i-j)+1, 0L)
{-# UNSAFE findSubseqStep #-}

findSubseq :: (Equiv a b) => ([a], [b]) -> long
findSubseq s ss = findSubseqStep(s, ss, 0L, 0L)
{-# SAFE findSubseq #-}

lsplit :: (Equiv a b) => ([a], [b]) -> ([a]*[a])
lsplit s ss =
  let
    n = findSubseq(s, ss)
  in
    (selectRange(s, 0L, n), selectRange(s, n + length(ss), length(s)))

